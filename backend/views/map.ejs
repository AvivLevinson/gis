<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GIS project</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
      integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
      crossorigin="anonymous"
    />
    <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
    integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
    crossorigin=""
  />
  <script
  src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
  integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
  crossorigin=""
></script>
<script src="https://unpkg.com/leaflet" type="text/javascript"></script>
<script src="https://unpkg.com/leaflet-ant-path" type="text/javascript"></script>
<link rel="stylesheet" href="/css/leafletMap.css">
  </head>
  <body>




    <div class="jumbotron jumbotron-fluid">
      <div class="container">
        <h1 class="display-8">Gis - geographic information system</h1>
        <p class="lead">
          this project implement traceRoute network command. using leafet.js
          library to show the trace of the request.
        </p>
      </div>
    </div>
 
    <div id="mapid"></div>

  
<script>
 

   function fetchData (){
  
    return new Promise((resolve, reject)=>{ 
     fetch('http://localhost:5000/admin/getJsonData')
    .then(res => res.json())
    .then((data)=>{
      console.log('fetch data');
      return resolve(data);
    });
    });
  }
  async function mapLealet(){
    let data = await fetchData();
    console.log('after fetch');
    console.log('this is data from map leaflet:' +  JSON.stringify(data));
    const routerData = data
    console.log(routerData);
    console.log(typeof routerData);
     var map = createMap();
     createMarker(map,routerData);
  }




mapLealet();



function createMap(){

  var map = L.map('mapid',{scrollWheelZoom:false}).setView([37.751, -97.822], 1).setMinZoom(1).setMaxZoom(12);
  L.tileLayer(
  'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',
  {
    maxZoom: 18,
    attribution:
      'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
      '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
      'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
  }
).addTo(map);

return map;


}


function createAnimatied(map,arr){
console.log('animatied');
const options = { use: L.polyline, delay: 27, dashArray: [7,31], weight: 4, color: "#FFFFFF", pulseColor: "#040404",hardwareAccelerated: true };
const path = L.polyline.antPath(arr, options);
path.addTo(map);

}

function createMarker(map,routerData){
  //console.log('routerData from popup:' + routerData);
  let arr = [];

  routerData.router.filter((value)=>{
  return value.latitude !== "";
}).forEach((value)=>{
  console.log(value);
  var text = `hop:${value.hop}<br>ip:${value.ip}<br>latitude:${value.latitude}, longitude:${value.longitude}`
  arr.push([value.latitude,value.longitude]);
  L.marker([value.latitude,value.longitude]).bindPopup(text).addTo(map);
})













createAnimatied(map,arr);

}

/*
      (async function () {
        var obj;
        let response = await fetch('http://localhost:5000/admin/getJsonData');

        if (response.ok) {
          console.log('this is res:' + response);
          let myJson = response.json().then((data)=>{
            leafletMap(data);
          });
          
        }
        
      })();



function leafletMap(data){

var map = L.map('mapid').setView([51.505, -0.09], 13);
L.tileLayer(
  'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',
  {
    maxZoom: 18,
    attribution:
      'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
      '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
      'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
  }
).addTo(map);

let arr = [];
let latlngs = [
    {latlng:[31.7808, 35.2287], hop:'1'},
    {latlng:[31.5, 34.75], hop:'2'},
    {latlng:[37.751, -97.822], hop: '3'},
    {latlng:[37.751, -96], hop: '4'},
    {latlng:[80.751, -97.822], hop: '5'}
];





latlngs.forEach((value)=>{
  arr.push(value.latlng);
  L.marker(value.latlng).bindPopup(value.hop).addTo(map);
});


const options = { use: L.polyline, delay: 27, dashArray: [7,31], weight: 4, color: "#FFFFFF", pulseColor: "#040404",hardwareAccelerated: true };
const path = L.polyline.antPath(arr, options);
path.addTo(map);




}
*/

</script>

  


  </body>
</html>
  </body>
</html>
